// Big-O : 알고리즘의 효율성을 나타내는 지표

// 문제 : 디스크에 있는 파일을 다른 지역에 살고 있는 친구에게 가장 빠른 방법은?
// 가정1 : 파일 크기가 작다면, 당연히 온라인 전송이 빠르다
// 가정2 : 1테라 바이트 크기가 넘는다면, 직접 전송이 빠를 수 있다


// 빅오 : 시간의 상한
// 빅오메가 : 시간의 하한
// 빅세타 : 빅오와 빅오메가의 평균값


// 문제 : 퀵 소트의 수행 시간은?
// 최선의 경우 : 모든 원소가 동일하다면, O(N)
// 최악의 경우 : 배열이 역순 정렬, O(N^2)
// 평균의 경우 : 평균적으로 O(NlogN)

// 상환시간 : ArrayList는 배열로 구현되어 있고, 배열의 용량이 꽉 찼을 때 ArrayList 클래스는 기존보다
//           크기가 두 배 더 큰 배열을 만든 뒤, 이전 배열의 모든 원소를 새 배열로 복사한다

// 문제 : 이 경우, 삽입 연산의 수행시간은?
// 답 : 배열이 가득찬 경우, 배열의 N개의 원소가 들어있다면, 새로운 원소를 삽입 시 O(N)이 걸린다
//      하지만, 대부분 배열이 가득 찬 경우는 드물고 삽입 연산은 O(1)이다

// LogN의 수행 시간은?
// 우리는 O(logN) 수행 시간을 자주 접한다.
// 이 수행시간은 어떻게 구현될까?
// 이진 탐색의 경우, N개의 정렬된 왼소가 들어 있는 배열에서 원소 x를 찾을 때 사용한다.
// 값을 탐색한 후 중값과 비교하여 x < 중간값이라면 왼쪽, x > 중간값이라면 오른쪽을 탐색한다.
// 이 경우, N/2, N/4, N/8, ...
// 이 때 사용되는 것이 바로 로그

