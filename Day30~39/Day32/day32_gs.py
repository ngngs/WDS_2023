# 채팅 서버 : 채팅 서버를 어떻게 구현할 것인가?
# 다양한 백엔드 컴포넌트, 클래스, 메소드에 대해 설명해보자
# 예상되는 문제는?

# 1. 사용자 관리와 사용자 간 대화와 관련된 핵심 기능에 주목하자
# 사용자를 추가 / 대화를 시작/ 사용자 상태를 갱신 

# 2. 어떤 종류의 기능을 지원할까
# - 온라인/오프라인 로그인, 친구추가요청, 상태 메시지 갱신, 일대일 혹은 그룹 채팅방생성

# 3. 시스템 핵심 컴포넌트는?
# 시스템 구성 : DB, 사용자, 서버
# DB : 지속적으로 보관할 자료들, 사용자 리스트나 채팅 내역 보관(규모 확장성이 필요한가?)
# 사용자 간 통신 : 서버 간 통신에는 XML을 사용해야 한다. 
# SPOF(single-point-of-failure)를 없애야 한다
# 예를들어 서버는 여러 대로 구성. 데이터는 서버에 분할 저장. 단, 서버 하나로 모든 사용자 로그인을 처리한다면 해당 서버가 죽을 때 수백만 사용자 접속이 불가해짐


# 일어날 수 있는 어려운 경우들은?
# 1. 어떤 사용자가 온라인 상태인지 어떻게 알 것인가? 정말로 확실하게 온라인 상태인가?
# 답 : 로그아웃 시 시스템에 알리는 방법을 쓴다고 해도 확실할 수 없다. 사용자의 인터넷 연결이 갑자기 죽을 수 있기 때문. (주기적으로 확인하는 ping의 방법이 확실하다)

# 2. 서버의 규모 확장성은 어떻게 확보할까?
# 답 : 규모 확장성은 매우 중요한 문제. 데이터를 여러 서버 분할하면 저장도 문제지만, 정보간 불일치 문제도 발생한다. 


##################### 문제 #########################################
# 문제 설명
# 회사원 Demi는 가끔은 야근을 하는데요, 야근을 하면 야근 피로도가 쌓입니다. 야근 피로도는 야근을 시작한 시점에서 남은 일의 작업량을 제곱하여 더한 값입니다. Demi는 N시간 동안 야근 피로도를 최소화하도록 일할 겁니다.Demi가 1시간 동안 작업량 1만큼을 처리할 수 있다고 할 때, 퇴근까지 남은 N 시간과 각 일에 대한 작업량 works에 대해 야근 피로도를 최소화한 값을 리턴하는 함수 solution을 완성해주세요.
from heapq import *

def solution(n, works):
    answer = 0
    if sum(works) <= n :
        return 0
    
    work = []
    for time in works :
        heappush(work, [-time, time])
    
    while n != 0 :
        tmp = heappop(work)[1]
        tmp -= 1
        heappush(work, [-tmp, tmp])
        n -= 1
    
    for time in work :
        tmp = time[1]
        answer += tmp**2
    return answer