package my.java.백기선.이펙티브자바.아이템1_생성자대신정적팩터리메서드를고려하라.정적팩터리메서드의장점345;

public class HelloServiceFactory {

    // 장점 3. 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다. (인터페이스 기반 프레임워크, 인터페이스에 정적 메서드)
    // 장점 4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다. (EnumSet)
    // 장점 5. 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다. (서비스 제공자 프레임워크)


    // 장점 3 설명
    // 아래 코드를 보면 알겠지만
    // (1) 리턴 '타입'에는 인터페이스를 선언했지만, 실제 리턴하는 객체는 그 하위 타입일 수 있다는 거죵! (저 클래스들은 인터페이스를 implements 하고 있는 녀석들이니까)
    // (2) 혹은 리턴 '타입'에 클래스를 해놓고, 실제 리턴하는 객체는 그 클래스의 하위 클래스를 할 수도 있는 거고
    // => 이를 통해 코드가 굉장히 유연해질 수 있고,
    // => 또한 이는 '인터페이스를 정적 팩토리 메서드의 반환 타입으로 사용하는' 인터페이스 기반 프레임워크를 만드는 핵심 기술이기도 하다.
    // Main 1

    // 장점 4 설명
    // 입력 매개변수(String lang)에 따라 다른 클래스의 객체를 반환할 수 있다는 것!!
    public static HelloService of(String lang){
        if(lang.equals("ko")){
            return new KoreanHelloService();
        }else{
            return new EnglishHelloService();
        }
    }
}
